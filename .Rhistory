ptm <- proc.time()
largestPalindrome <- 0
i <- max
while (i >= min) {
j <- max
while (j<= i) {
if (i*j <= largestPalindrome) {
break
} else if (isPalindrome(i*j)) {
largestPalindrome <- i*j
}
j <- j-1
}
i <- i-1
}
largestPalindrome
proc.time() - ptm       # Stop the clock
order(result$palidrome)
result$palidrome
sort(result$palidrome)
ptm <- proc.time()
largestPalindrome <- 0
i <- max
while (i >= min) {
j <- max
while (j<= i) {
if (i*j <= largestPalindrome) {
break
} else if (isPalindrome(i*j)) {
largestPalindrome <- i*j
}
j <- j-1
}
i <- i-1
}
largestPalindrome
proc.time() - ptm       # Stop the clock
##### ALTERNATIVE faster #####
ptm <- proc.time()
largestPalindrome <- 0
i <- max
while (i >= min) {
j <- max
while (j >= i) {
if (i*j <= largestPalindrome) {
break
} else if (isPalindrome(i*j)) {
largestPalindrome <- i*j
}
j <- j-1
}
i <- i-1
}
largestPalindrome
proc.time() - ptm       # Stop the clock
########## Problem 4 - Euler Project ##########
##### slow but very general #####
max <- 999
min <- 100
max_length <- length(as.numeric(strsplit(as.character(max), "")[[1]]))
palindrom <- matrix(rep(0,3),nrow=3 )
ptm <- proc.time()
for (i in max:min) {
for (j in max:min) {
test <- as.numeric(strsplit(as.character(i*j), "")[[1]])
if (length(test)==6) {
if (test[1]==test[6] && test[2]==test[5] && test[3]==test[4]) {
if (!any(i*j==palindrom[1,])) {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
} else if (length(test)==5) {
if (test[1]==test[5] && test[2]==test[4]) {
if (!any(i*j==palindrom[1,])) {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
} else {
if (test[1]==test[4] && test[2]==test[3]) {
if (!any(i*j==palindrom[1,])) {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
}
}
}
result <- as.data.frame(t(palindrom[,-1]))
names(result) <- c("palidrome","first factor","second factor")
result[result$palidrome==max(result$palidrome),]
proc.time() - ptm       # Stop the clock
########## Problem 4 - Euler Project ##########
##### slow but very general #####
max <- 999
min <- 100
max_length <- length(as.numeric(strsplit(as.character(max), "")[[1]]))
palindrom <- matrix(rep(0,3),nrow=3 )
ptm <- proc.time()
for (i in max:min) {
for (j in max:min) {
test <- as.numeric(strsplit(as.character(i*j), "")[[1]])
if (length(test)==6) {
if (test[1]==test[6] && test[2]==test[5] && test[3]==test[4]) {
if (any(i*j==palindrom[1,])) {
} else {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
} else if (length(test)==5) {
if (test[1]==test[5] && test[2]==test[4]) {
if (any(i*j==palindrom[1,])) {
} else {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
} else {
if (test[1]==test[4] && test[2]==test[3]) {
if (any(i*j==palindrom[1,])) {
} else {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
}
}
}
result <- as.data.frame(t(palindrom[,-1]))
names(result) <- c("palidrome","first factor","second factor")
result[result$palidrome==max(result$palidrome),]
proc.time() - ptm       # Stop the clock
########## Problem 4 - Euler Project ##########
##### slow but very general #####
max <- 999
min <- 100
max_length <- length(as.numeric(strsplit(as.character(max), "")[[1]]))
palindrom <- matrix(rep(0,3),nrow=3 )
ptm <- proc.time()
for (i in max:min) {
for (j in max:min) {
test <- as.numeric(strsplit(as.character(i*j), "")[[1]])
if (length(test)==6) {
if (test[1]==test[6] && test[2]==test[5] && test[3]==test[4]) {
if (!any(i*j==palindrom[1,])) {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
} else if (length(test)==5) {
if (test[1]==test[5] && test[2]==test[4]) {
if (!any(i*j==palindrom[1,])) {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
} else {
if (test[1]==test[4] && test[2]==test[3]) {
if (!any(i*j==palindrom[1,])) {
palindrom <- matrix(c(palindrom,i*j,i,j), nrow=3)
}
}
}
}
}
result <- as.data.frame(t(palindrom[,-1]))
names(result) <- c("palidrome","first factor","second factor")
result[result$palidrome==max(result$palidrome),]
proc.time() - ptm       # Stop the clock
source('~/Documents/Euler Project/Problem 004.R', echo=TRUE)
1:10
i %% 1:10
4 %% 1:10
max <- 10
i <- 1
success <- NULL
while (success==NULL) {
if (sum(i %% 1:max)==0) {
success <- i
} else {
i <- i + 1
}
}
success
########## Problem 5 - Euler Project ##########
max <- 10
i <- 1
success <- 0
while (success==0) {
if (sum(i %% 1:max)==0) {
success <- i
} else {
i <- i + 1
}
}
success
########## Problem 5 - Euler Project ##########
ptm <- proc.time()      # Start the clock!
max <- 10
i <- 1
success <- 0
while (success==0) {
if (sum(i %% 1:max)==0) {
success <- i
} else {
i <- i + 1
}
}
success
proc.time() - ptm       # Stop the clock
########## Problem 5 - Euler Project ##########
ptm <- proc.time()      # Start the clock!
max <- 20
i <- 1
success <- 0
while (success==0) {
if (sum(i %% 1:max)==0) {
success <- i
} else {
i <- i + 1
}
}
i
93889389 %% 1:20
########## Problem 5 - Euler Project ##########
ptm <- proc.time()      # Start the clock!
max <- 20
i <- 1
success <- 0
while (success==0) {
if (sum(i %% 10:max)==0) {
success <- i
} else {
i <- i + 1
}
}
i
gamma(20+1)
i<gamma(20+1)/gamma(10+1)
gamma(20+1)/gamma(10+1)
670442572800 %% 1:20
670442572800/gamma(10+1)
184756 %% 1:20
source('~/Documents/Euler Project/Problem 005.R', echo=TRUE)
232792560 %% 1:20
2**4
2**4*3**2*5*7*11*13*17*19
1:10%*%1:10
(((max+1)*max)/2)**2
max <- 10
(((max+1)*max)/2)**2
########## Problem 6 - Euler Project ##########
max <- 100
difference <- (((max+1)*max)/2)**2 - 1:max%*%1:max
print(difference)
########## Problem 6 - Euler Project ##########
max <- 100
ptm <- proc.time()      # Start the clock!
difference <- (((max+1)*max)/2)**2 - 1:max%*%1:max
print(difference)
proc.time() - ptm       # Stop the clock
########## Problem 6 - Euler Project ##########
max <- 1000
ptm <- proc.time()      # Start the clock!
difference <- (((max+1)*max)/2)**2 - 1:max%*%1:max
print(difference)
proc.time() - ptm       # Stop the clock
update
A = ([1,2,3,4], nrwo=2)
A = ((1,2,3,4), nrwo=2)
A = matrix(1:4, nrwo=2
A = matrix(1:4, nrwo=2)
A = matrix(1:4, nrwo=2)
A = matrix(1:4, nrow=2)
A
install.packages("shiny")
install.packages("rmarkdown")
attach(WhiteWne)
attach(WhiteWene)
attach(WhiteWine)
attach(WhiteWine)
getwd()
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
getwd()
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(WhiteWine_test)
class(WhiteWine_test)
class(WhiteWine_test[,1])
class(WhiteWine_test[,2])
class(WhiteWine_test[,3])
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(WhiteWine_test)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
WhiteWine = merge.data.frame(WhiteWine_test, WhiteWine_training)
head(WhiteWine)
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors
books
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
m1
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(WhiteWine_test)
head(WhiteWine_training)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
par(mfrow=c(2,2), oma = c(1,1,0,0) + 0.1, mar = c(3,3,1,1) + 0.1)
barplot((table(quality)), col=c("slateblue4", "slategray", "slategray
##### Loading the Data #####
# Set working path
path = "/home/flocf/Documents/git/SPL/"
setwd(path)
WhiteWine_test = read.csv("data/Test50_winedata.csv")
WhiteWine_training = read.csv("data/Training50_winedata.csv")
WhiteWine = read.csv("data/Wine_data.csv")
par(mfrow=c(2,2), oma = c(1,1,0,0) + 0.1, mar = c(3,3,1,1) + 0.1)
barplot((table(quality)), col=c("slateblue4", "slategray", "slategray1", "slategray2", "slategray3", "skyblue4"))
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
boxplot(WhiteWine)
boxplot(WhiteWine$quality)
rm(list = ls()
)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
boxplot(WhiteWine$quality)
boxplot(WhiteWine$quality)
hist(WhiteWine$quality)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(WhiteWine)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(WhiteWine)
hist(WhiteWine$quality)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
install.packages("ggplot2")
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(RedWine)
head(WhiteWine)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(wines)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
names(wines)
names(wines)[-1]
names(wines)[-length(names(wines))]
names(wines)[!"colour"]
names(wines)[!="colour"]
last(names(wines))
names(wines)["colour"]
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
length(names(wines)[-length(names(wines))])
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
par(mfrow = c(3, 4))
ggplot(wines, aes(names, fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1)
ggplot(wines, aes(nquality, fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1)
ggplot(wines, aes(quality, fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
ggplot(wines, aes(quality, fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1) +
facet_wrap(~colour, nrow=2)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
p1
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
p2
names(wines)[1]
ggplot(wines, aes("quality", fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1) +
facet_wrap(~colour, nrow=2)
ggplot(wines, aes(quality, fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1) +
facet_wrap(~colour, nrow=2)
test = "test"
test
as.numeric(test)
as.formula(test)
class(test)
as.factor(test)
ggplot(wines, aes(as.factor("quality"), fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1) +
facet_wrap(~colour, nrow=2)
names
names(wines)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
ggplot(wines, aes(alcohol, fill = colour)) +
geom_histogram(aes(y = ..density..), alpha = 0.5, position = 'identity', binwidth = 1)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
hsit_alco
hist_alco
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(wines)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
qplot(quality, data = data, fill = color, binwidth = 1) +
scale_x_continuous(breaks = seq(3,10,1), lim = c(3,10)) +
scale_y_sqrt()
qplot(quality, data = wines, fill = colour, binwidth = 1) +
scale_x_continuous(breaks = seq(3,10,1), lim = c(3,10)) +
scale_y_sqrt()
red <- read.csv('data/wineQualityReds.csv')
white <- read.csv('data/wineQualityWhites.csv')
# add categorical varialbles to both sets
red['color'] <- 'red'
white['color'] <- 'white'
# merge red wine and white wine datasets
data <- rbind(red, white)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
qplot(quality, data = data, fill = color, binwidth = 1) +
scale_x_continuous(breaks = seq(3,10,1), lim = c(3,10)) +
scale_y_sqrt()
red <- read.csv('data/winequality-red.csv')
white <- read.csv('data/winequality-white.csv')
# add categorical varialbles to both sets
red['color'] <- 'red'
white['color'] <- 'white'
# merge red wine and white wine datasets
data <- rbind(red, white)
qplot(quality, data = data, fill = color, binwidth = 1) +
scale_x_continuous(breaks = seq(3,10,1), lim = c(3,10)) +
scale_y_sqrt()
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
source('~/Documents/git/SPL/fancyCode.R', echo=TRUE)
head(wines["colour"=="red"])
head(wines[colour="red"])
head(wines[(colour="red")])
head(wines[!(colour="red")])
wines[colour]
wines["colour"]
wines["colour"="red"]
wines["colour"=="red"]
wines[("colour"="red")]
wines[("colour"=="red")]
wines[wines["colour"]=="red"]
head(wines[wines["colour"]=="red"])
head(wines[wines$colour=="red"])
head(wines$colour=="red")
head(wines[wines$colour=="red"])
subset.data.frame(wines,select = colour=="red")
subset.data.frame(wines,colour=="red")
head(subset(wines,colour=="red"))
head(RedWine)
